{"ast":null,"code":"var _jsxFileName = \"E:\\\\Industry Connect\\\\Repo\\\\ReactFirstCode\\\\onboard-react-app\\\\src\\\\components\\\\saleslist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Table, Button, Modal, Form, Input, Dropdown } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst targetUrl = 'https://localhost:7148/api/Sale';\nconst SalesList = () => {\n  _s();\n  const [sales, setSales] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [newSaleData, setNewSaleData] = useState({\n    customerId: '',\n    productId: '',\n    storeId: '',\n    dateSold: ''\n  });\n  const [customers, setCustomers] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [editSaleId, setEditSaleId] = useState(null);\n  const [editSaleData, setEditSaleData] = useState({\n    customerId: '',\n    productId: '',\n    storeId: '',\n    dateSold: ''\n  });\n  const handleDelete = async saleId => {\n    try {\n      const response = await fetch(`${targetUrl}/${saleId}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        // Sale deleted successfully\n        const updatedSales = sales.filter(sale => sale.id !== saleId);\n        setSales(updatedSales);\n      } else {\n        console.error('Error deleting sale');\n      }\n    } catch (error) {\n      console.error('Error deleting sale:', error);\n    }\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const salesResponse = await fetch(targetUrl);\n        const salesData = await salesResponse.json();\n        setSales(salesData);\n\n        // Fetch data for dropdowns (customers, products, stores)\n        const customersResponse = await fetch('https://localhost:7148/api/Customer');\n        const customersData = await customersResponse.json();\n        setCustomers(customersData);\n        const productsResponse = await fetch('https://localhost:7148/api/Product');\n        const productsData = await productsResponse.json();\n        setProducts(productsData);\n        const storesResponse = await fetch('https://localhost:7148/api/Store');\n        const storesData = await storesResponse.json();\n        setStores(storesData);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleEdit = saleId => {\n    setEditSaleId(saleId);\n    const saleToEdit = sales.find(sale => sale.id === saleId);\n    if (saleToEdit) {\n      setEditSaleData({\n        customerId: saleToEdit.customerId,\n        productId: saleToEdit.productId,\n        storeId: saleToEdit.storeId,\n        dateSold: saleToEdit.dateSold\n      });\n    }\n    setModalOpen(true);\n  };\n  const handleEditSale = async () => {\n    if (editSaleId) {\n      try {\n        const response = await fetch(`${targetUrl}/${editSaleId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(editSaleData)\n        });\n        if (response.ok) {\n          const updatedSales = sales.map(sale => {\n            if (sale.id === editSaleId) {\n              return {\n                ...sale,\n                customerId: editSaleData.customerId,\n                productId: editSaleData.productId,\n                storeId: editSaleData.storeId,\n                dateSold: editSaleData.dateSold\n              };\n            }\n            return sale;\n          });\n          setSales(updatedSales);\n        } else {\n          console.error('Error updating sale');\n        }\n      } catch (error) {\n        console.error('Error updating sale:', error);\n      }\n    }\n    setEditSaleId(null);\n    setModalOpen(false);\n    setEditSaleData({\n      customerId: '',\n      productId: '',\n      storeId: '',\n      dateSold: ''\n    });\n  };\n  const handleNewSale = () => {\n    setModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setEditSaleId(null);\n    setModalOpen(false);\n    setEditSaleData({\n      customerId: '',\n      productId: '',\n      storeId: '',\n      dateSold: ''\n    });\n  };\n  const handleSaveNewSale = async () => {\n    try {\n      const response = await fetch(targetUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newSaleData)\n      });\n      if (response.ok) {\n        const updatedResponse = await fetch(targetUrl);\n        const updatedData = await updatedResponse.json();\n        setSales(updatedData);\n        handleCloseModal();\n      } else {\n        console.error('Error saving new sale');\n      }\n    } catch (error) {\n      console.error('Error saving new sale:', error);\n    }\n  };\n  const handleInputChange = (e, {\n    name,\n    value\n  }) => {\n    setEditSaleData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: handleNewSale,\n      children: \"New Sale\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      celled: true,\n      children: [/*#__PURE__*/_jsxDEV(Table.Header, {\n        children: /*#__PURE__*/_jsxDEV(Table.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Customer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Product\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Store\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Date Sold\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table.Body, {\n        children: sales.map(sale => /*#__PURE__*/_jsxDEV(Table.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: sale.customer.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: sale.product.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: sale.store.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: sale.dateSold\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: \"edit\",\n              color: \"yellow\",\n              onClick: () => handleEdit(sale.id),\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"edit icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  marginRight: '5px'\n                },\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: \"delete\",\n              color: \"red\",\n              onClick: () => handleDelete(sale.id),\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"delete icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 209,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  marginRight: '5px'\n                },\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 208,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 29\n          }, this)]\n        }, sale.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: modalOpen,\n      onClose: handleCloseModal,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: editSaleId ? 'Edit Sale' : 'Create New Sale'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }, this), editSaleId ? /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Customer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"customerId\",\n              value: editSaleData.customerId,\n              options: customers.map(customer => ({\n                key: customer.id,\n                text: customer.name,\n                value: customer.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'customerId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"productId\",\n              value: editSaleData.productId,\n              options: products.map(product => ({\n                key: product.id,\n                text: product.name,\n                value: product.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'productId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Store\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"storeId\",\n              value: editSaleData.storeId,\n              options: stores.map(store => ({\n                key: store.id,\n                text: store.name,\n                value: store.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'storeId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Date Sold\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              name: \"dateSold\",\n              type: \"date\",\n              value: editSaleData.dateSold,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Customer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"customerId\",\n              value: newSaleData.customerId,\n              options: customers.map(customer => ({\n                key: customer.id,\n                text: customer.name,\n                value: customer.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'customerId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"productId\",\n              value: newSaleData.productId,\n              options: products.map(product => ({\n                key: product.id,\n                text: product.name,\n                value: product.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'productId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 305,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 303,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Store\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"storeId\",\n              value: newSaleData.storeId,\n              options: stores.map(store => ({\n                key: store.id,\n                text: store.name,\n                value: store.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'storeId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Date Sold\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              name: \"dateSold\",\n              type: \"date\",\n              value: newSaleData.dateSold,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 337,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: editSaleId ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            onClick: handleEditSale,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            negative: true,\n            onClick: handleCloseModal,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            primary: true,\n            onClick: handleSaveNewSale,\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: handleCloseModal,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 362,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 9\n  }, this);\n};\n_s(SalesList, \"Jl0tjcSuKcUOKjXrBqSV4QSFLKk=\");\n_c = SalesList;\nexport default SalesList;\nvar _c;\n$RefreshReg$(_c, \"SalesList\");","map":{"version":3,"names":["React","useState","useEffect","Table","Button","Modal","Form","Input","Dropdown","jsxDEV","_jsxDEV","Fragment","_Fragment","targetUrl","SalesList","_s","sales","setSales","modalOpen","setModalOpen","newSaleData","setNewSaleData","customerId","productId","storeId","dateSold","customers","setCustomers","products","setProducts","stores","setStores","editSaleId","setEditSaleId","editSaleData","setEditSaleData","handleDelete","saleId","response","fetch","method","ok","updatedSales","filter","sale","id","console","error","fetchData","salesResponse","salesData","json","customersResponse","customersData","productsResponse","productsData","storesResponse","storesData","handleEdit","saleToEdit","find","handleEditSale","headers","body","JSON","stringify","map","handleNewSale","handleCloseModal","handleSaveNewSale","updatedResponse","updatedData","handleInputChange","e","name","value","prevData","children","primary","onClick","fileName","_jsxFileName","lineNumber","columnNumber","celled","Header","Row","HeaderCell","Body","Cell","customer","product","store","icon","color","className","style","marginRight","open","onClose","Content","Field","options","key","text","onChange","selection","type","Actions","negative","_c","$RefreshReg$"],"sources":["E:/Industry Connect/Repo/ReactFirstCode/onboard-react-app/src/components/saleslist.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Table, Button, Modal, Form, Input, Dropdown } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst targetUrl = 'https://localhost:7148/api/Sale';\r\n\r\nconst SalesList = () => {\r\n    const [sales, setSales] = useState([]);\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [newSaleData, setNewSaleData] = useState({\r\n        customerId: '',\r\n        productId: '',\r\n        storeId: '',\r\n        dateSold: '',\r\n    });\r\n\r\n    const [customers, setCustomers] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [stores, setStores] = useState([]);\r\n\r\n    const [editSaleId, setEditSaleId] = useState(null);\r\n    const [editSaleData, setEditSaleData] = useState({\r\n        customerId: '',\r\n        productId: '',\r\n        storeId: '',\r\n        dateSold: '',\r\n    });\r\n\r\n    const handleDelete = async (saleId) => {\r\n        try {\r\n            const response = await fetch(`${targetUrl}/${saleId}`, {\r\n                method: 'DELETE',\r\n            });\r\n\r\n            if (response.ok) {\r\n                // Sale deleted successfully\r\n                const updatedSales = sales.filter((sale) => sale.id !== saleId);\r\n                setSales(updatedSales);\r\n            } else {\r\n                console.error('Error deleting sale');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting sale:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const salesResponse = await fetch(targetUrl);\r\n                const salesData = await salesResponse.json();\r\n                setSales(salesData);\r\n\r\n                // Fetch data for dropdowns (customers, products, stores)\r\n                const customersResponse = await fetch('https://localhost:7148/api/Customer');\r\n                const customersData = await customersResponse.json();\r\n                setCustomers(customersData);\r\n\r\n                const productsResponse = await fetch('https://localhost:7148/api/Product');\r\n                const productsData = await productsResponse.json();\r\n                setProducts(productsData);\r\n\r\n                const storesResponse = await fetch('https://localhost:7148/api/Store');\r\n                const storesData = await storesResponse.json();\r\n                setStores(storesData);\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const handleEdit = (saleId) => {\r\n        setEditSaleId(saleId);\r\n        const saleToEdit = sales.find((sale) => sale.id === saleId);\r\n        if (saleToEdit) {\r\n            setEditSaleData({\r\n                customerId: saleToEdit.customerId,\r\n                productId: saleToEdit.productId,\r\n                storeId: saleToEdit.storeId,\r\n                dateSold: saleToEdit.dateSold,\r\n            });\r\n        }\r\n        setModalOpen(true);\r\n    };\r\n\r\n    const handleEditSale = async () => {\r\n        if (editSaleId) {\r\n            try {\r\n                const response = await fetch(`${targetUrl}/${editSaleId}`, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(editSaleData),\r\n                });\r\n                if (response.ok) {\r\n                    const updatedSales = sales.map((sale) => {\r\n                        if (sale.id === editSaleId) {\r\n                            return {\r\n                                ...sale,\r\n                                customerId: editSaleData.customerId,\r\n                                productId: editSaleData.productId,\r\n                                storeId: editSaleData.storeId,\r\n                                dateSold: editSaleData.dateSold,\r\n                            };\r\n                        }\r\n                        return sale;\r\n                    });\r\n                    setSales(updatedSales);\r\n                } else {\r\n                    console.error('Error updating sale');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error updating sale:', error);\r\n            }\r\n        }\r\n\r\n        setEditSaleId(null);\r\n        setModalOpen(false);\r\n        setEditSaleData({\r\n            customerId: '',\r\n            productId: '',\r\n            storeId: '',\r\n            dateSold: '',\r\n        });\r\n    };\r\n\r\n    const handleNewSale = () => {\r\n        setModalOpen(true);\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setEditSaleId(null);\r\n        setModalOpen(false);\r\n        setEditSaleData({\r\n            customerId: '',\r\n            productId: '',\r\n            storeId: '',\r\n            dateSold: '',\r\n        });\r\n    };\r\n\r\n    const handleSaveNewSale = async () => {\r\n        try {\r\n            const response = await fetch(targetUrl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(newSaleData),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const updatedResponse = await fetch(targetUrl);\r\n                const updatedData = await updatedResponse.json();\r\n                setSales(updatedData);\r\n\r\n                handleCloseModal();\r\n            } else {\r\n                console.error('Error saving new sale');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error saving new sale:', error);\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e, { name, value }) => {\r\n        setEditSaleData((prevData) => ({\r\n            ...prevData,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button primary onClick={handleNewSale}>\r\n                New Sale\r\n            </Button>\r\n\r\n            <Table celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer</Table.HeaderCell>\r\n                        <Table.HeaderCell>Product</Table.HeaderCell>\r\n                        <Table.HeaderCell>Store</Table.HeaderCell>\r\n                        <Table.HeaderCell>Date Sold</Table.HeaderCell>\r\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\r\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n\r\n                <Table.Body>\r\n                    {sales.map((sale) => (\r\n                        <Table.Row key={sale.id}>\r\n                            <Table.Cell>{sale.customer.name}</Table.Cell>\r\n                            <Table.Cell>{sale.product.name}</Table.Cell>\r\n                            <Table.Cell>{sale.store.name}</Table.Cell>\r\n                            <Table.Cell>{sale.dateSold}</Table.Cell>\r\n                            <Table.Cell>\r\n                                <Button icon=\"edit\" color=\"yellow\" onClick={() => handleEdit(sale.id)}>\r\n                                    <i className=\"edit icon\"></i>\r\n                                    <span style={{ marginRight: '5px' }}>Edit</span>\r\n                                </Button>\r\n                            </Table.Cell>\r\n                            <Table.Cell>\r\n                                <Button icon=\"delete\" color=\"red\" onClick={() => handleDelete(sale.id)}>\r\n                                    <i className=\"delete icon\"></i>\r\n                                    <span style={{ marginRight: '5px' }}>Delete</span>\r\n                                </Button>\r\n                            </Table.Cell>\r\n                        </Table.Row>\r\n                    ))}\r\n                </Table.Body>\r\n            </Table>\r\n\r\n            <Modal open={modalOpen} onClose={handleCloseModal}>\r\n                <Modal.Header>\r\n                    {editSaleId ? 'Edit Sale' : 'Create New Sale'}\r\n                </Modal.Header>\r\n                {editSaleId ? (\r\n                    <Modal.Content>\r\n                        <Form>\r\n                            <Form.Field>\r\n                                <label>Customer</label>\r\n                                <Dropdown\r\n                                    name=\"customerId\"\r\n                                    value={editSaleData.customerId}\r\n                                    options={customers.map((customer) => ({\r\n                                        key: customer.id,\r\n                                        text: customer.name,\r\n                                        value: customer.id,\r\n                                    }))}\r\n                                    onChange={(e, { value }) =>\r\n                                        handleInputChange(e, { name: 'customerId', value })\r\n                                    }\r\n                                    selection\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>Product</label>\r\n                                <Dropdown\r\n                                    name=\"productId\"\r\n                                    value={editSaleData.productId}\r\n                                    options={products.map((product) => ({\r\n                                        key: product.id,\r\n                                        text: product.name,\r\n                                        value: product.id,\r\n                                    }))}\r\n                                    onChange={(e, { value }) =>\r\n                                        handleInputChange(e, { name: 'productId', value })\r\n                                    }\r\n                                    selection\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>Store</label>\r\n                                <Dropdown\r\n                                    name=\"storeId\"\r\n                                    value={editSaleData.storeId}\r\n                                    options={stores.map((store) => ({\r\n                                        key: store.id,\r\n                                        text: store.name,\r\n                                        value: store.id,\r\n                                    }))}\r\n                                    onChange={(e, { value }) =>\r\n                                        handleInputChange(e, { name: 'storeId', value })\r\n                                    }\r\n                                    selection\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>Date Sold</label>\r\n                                <Input\r\n                                    name=\"dateSold\"\r\n                                    type=\"date\"\r\n                                    value={editSaleData.dateSold}\r\n                                    onChange={handleInputChange}\r\n                                />\r\n                            </Form.Field>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                ) : (\r\n                    <Modal.Content>\r\n                        <Form>\r\n                            <Form.Field>\r\n                                <label>Customer</label>\r\n                                <Dropdown\r\n                                    name=\"customerId\"\r\n                                    value={newSaleData.customerId}\r\n                                    options={customers.map((customer) => ({\r\n                                        key: customer.id,\r\n                                        text: customer.name,\r\n                                        value: customer.id,\r\n                                    }))}\r\n                                    onChange={(e, { value }) =>\r\n                                        handleInputChange(e, { name: 'customerId', value })\r\n                                    }\r\n                                    selection\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>Product</label>\r\n                                <Dropdown\r\n                                    name=\"productId\"\r\n                                    value={newSaleData.productId}\r\n                                    options={products.map((product) => ({\r\n                                        key: product.id,\r\n                                        text: product.name,\r\n                                        value: product.id,\r\n                                    }))}\r\n                                    onChange={(e, { value }) =>\r\n                                        handleInputChange(e, { name: 'productId', value })\r\n                                    }\r\n                                    selection\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>Store</label>\r\n                                <Dropdown\r\n                                    name=\"storeId\"\r\n                                    value={newSaleData.storeId}\r\n                                    options={stores.map((store) => ({\r\n                                        key: store.id,\r\n                                        text: store.name,\r\n                                        value: store.id,\r\n                                    }))}\r\n                                    onChange={(e, { value }) =>\r\n                                        handleInputChange(e, { name: 'storeId', value })\r\n                                    }\r\n                                    selection\r\n                                />\r\n                            </Form.Field>\r\n                            <Form.Field>\r\n                                <label>Date Sold</label>\r\n                                <Input\r\n                                    name=\"dateSold\"\r\n                                    type=\"date\"\r\n                                    value={newSaleData.dateSold}\r\n                                    onChange={handleInputChange}\r\n                                />\r\n                            </Form.Field>\r\n                        </Form>\r\n                    </Modal.Content>\r\n                )}\r\n                <Modal.Actions>\r\n                    {editSaleId ? (\r\n                        <>\r\n                            <Button primary onClick={handleEditSale}>\r\n                                Save\r\n                            </Button>\r\n                            <Button negative onClick={handleCloseModal}>\r\n                                Cancel\r\n                            </Button>\r\n                        </>\r\n                    ) : (\r\n                        <>\r\n                            <Button primary onClick={handleSaveNewSale}>\r\n                                Save\r\n                            </Button>\r\n                            <Button onClick={handleCloseModal}>Cancel</Button>\r\n                        </>)\r\n                    }\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SalesList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,mBAAmB;AAC/E,OAAO,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,SAAS,GAAG,iCAAiC;AAEnD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC;IAC3CqB,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE;EACd,CAAC,CAAC;EAEF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG1B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC2B,QAAQ,EAAEC,WAAW,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC6B,MAAM,EAAEC,SAAS,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAM,CAAC+B,UAAU,EAAEC,aAAa,CAAC,GAAGhC,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACiC,YAAY,EAAEC,eAAe,CAAC,GAAGlC,QAAQ,CAAC;IAC7CqB,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE;EACd,CAAC,CAAC;EAEF,MAAMW,YAAY,GAAG,MAAOC,MAAM,IAAK;IACnC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE1B,SAAU,IAAGwB,MAAO,EAAC,EAAE;QACnDG,MAAM,EAAE;MACZ,CAAC,CAAC;MAEF,IAAIF,QAAQ,CAACG,EAAE,EAAE;QACb;QACA,MAAMC,YAAY,GAAG1B,KAAK,CAAC2B,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKR,MAAM,CAAC;QAC/DpB,QAAQ,CAACyB,YAAY,CAAC;MAC1B,CAAC,MAAM;QACHI,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;MACxC;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;EACJ,CAAC;EAED7C,SAAS,CAAC,MAAM;IACZ,MAAM8C,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,aAAa,GAAG,MAAMV,KAAK,CAAC1B,SAAS,CAAC;QAC5C,MAAMqC,SAAS,GAAG,MAAMD,aAAa,CAACE,IAAI,CAAC,CAAC;QAC5ClC,QAAQ,CAACiC,SAAS,CAAC;;QAEnB;QACA,MAAME,iBAAiB,GAAG,MAAMb,KAAK,CAAC,qCAAqC,CAAC;QAC5E,MAAMc,aAAa,GAAG,MAAMD,iBAAiB,CAACD,IAAI,CAAC,CAAC;QACpDxB,YAAY,CAAC0B,aAAa,CAAC;QAE3B,MAAMC,gBAAgB,GAAG,MAAMf,KAAK,CAAC,oCAAoC,CAAC;QAC1E,MAAMgB,YAAY,GAAG,MAAMD,gBAAgB,CAACH,IAAI,CAAC,CAAC;QAClDtB,WAAW,CAAC0B,YAAY,CAAC;QAEzB,MAAMC,cAAc,GAAG,MAAMjB,KAAK,CAAC,kCAAkC,CAAC;QACtE,MAAMkB,UAAU,GAAG,MAAMD,cAAc,CAACL,IAAI,CAAC,CAAC;QAC9CpB,SAAS,CAAC0B,UAAU,CAAC;MACzB,CAAC,CAAC,OAAOV,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IAEDC,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMU,UAAU,GAAIrB,MAAM,IAAK;IAC3BJ,aAAa,CAACI,MAAM,CAAC;IACrB,MAAMsB,UAAU,GAAG3C,KAAK,CAAC4C,IAAI,CAAEhB,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKR,MAAM,CAAC;IAC3D,IAAIsB,UAAU,EAAE;MACZxB,eAAe,CAAC;QACZb,UAAU,EAAEqC,UAAU,CAACrC,UAAU;QACjCC,SAAS,EAAEoC,UAAU,CAACpC,SAAS;QAC/BC,OAAO,EAAEmC,UAAU,CAACnC,OAAO;QAC3BC,QAAQ,EAAEkC,UAAU,CAAClC;MACzB,CAAC,CAAC;IACN;IACAN,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAM0C,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI7B,UAAU,EAAE;MACZ,IAAI;QACA,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAE1B,SAAU,IAAGmB,UAAW,EAAC,EAAE;UACvDQ,MAAM,EAAE,KAAK;UACbsB,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC/B,YAAY;QACrC,CAAC,CAAC;QACF,IAAII,QAAQ,CAACG,EAAE,EAAE;UACb,MAAMC,YAAY,GAAG1B,KAAK,CAACkD,GAAG,CAAEtB,IAAI,IAAK;YACrC,IAAIA,IAAI,CAACC,EAAE,KAAKb,UAAU,EAAE;cACxB,OAAO;gBACH,GAAGY,IAAI;gBACPtB,UAAU,EAAEY,YAAY,CAACZ,UAAU;gBACnCC,SAAS,EAAEW,YAAY,CAACX,SAAS;gBACjCC,OAAO,EAAEU,YAAY,CAACV,OAAO;gBAC7BC,QAAQ,EAAES,YAAY,CAACT;cAC3B,CAAC;YACL;YACA,OAAOmB,IAAI;UACf,CAAC,CAAC;UACF3B,QAAQ,CAACyB,YAAY,CAAC;QAC1B,CAAC,MAAM;UACHI,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;QACxC;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ;IAEAd,aAAa,CAAC,IAAI,CAAC;IACnBd,YAAY,CAAC,KAAK,CAAC;IACnBgB,eAAe,CAAC;MACZb,UAAU,EAAE,EAAE;MACdC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE;IACd,CAAC,CAAC;EACN,CAAC;EAED,MAAM0C,aAAa,GAAGA,CAAA,KAAM;IACxBhD,YAAY,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMiD,gBAAgB,GAAGA,CAAA,KAAM;IAC3BnC,aAAa,CAAC,IAAI,CAAC;IACnBd,YAAY,CAAC,KAAK,CAAC;IACnBgB,eAAe,CAAC;MACZb,UAAU,EAAE,EAAE;MACdC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE;IACd,CAAC,CAAC;EACN,CAAC;EAED,MAAM4C,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACA,MAAM/B,QAAQ,GAAG,MAAMC,KAAK,CAAC1B,SAAS,EAAE;QACpC2B,MAAM,EAAE,MAAM;QACdsB,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC7C,WAAW;MACpC,CAAC,CAAC;MAEF,IAAIkB,QAAQ,CAACG,EAAE,EAAE;QACb,MAAM6B,eAAe,GAAG,MAAM/B,KAAK,CAAC1B,SAAS,CAAC;QAC9C,MAAM0D,WAAW,GAAG,MAAMD,eAAe,CAACnB,IAAI,CAAC,CAAC;QAChDlC,QAAQ,CAACsD,WAAW,CAAC;QAErBH,gBAAgB,CAAC,CAAC;MACtB,CAAC,MAAM;QACHtB,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,MAAMyB,iBAAiB,GAAGA,CAACC,CAAC,EAAE;IAAEC,IAAI;IAAEC;EAAM,CAAC,KAAK;IAC9CxC,eAAe,CAAEyC,QAAQ,KAAM;MAC3B,GAAGA,QAAQ;MACX,CAACF,IAAI,GAAGC;IACZ,CAAC,CAAC,CAAC;EACP,CAAC;EAED,oBACIjE,OAAA;IAAAmE,QAAA,gBACInE,OAAA,CAACN,MAAM;MAAC0E,OAAO;MAACC,OAAO,EAAEZ,aAAc;MAAAU,QAAA,EAAC;IAExC;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAETzE,OAAA,CAACP,KAAK;MAACiF,MAAM;MAAAP,QAAA,gBACTnE,OAAA,CAACP,KAAK,CAACkF,MAAM;QAAAR,QAAA,eACTnE,OAAA,CAACP,KAAK,CAACmF,GAAG;UAAAT,QAAA,gBACNnE,OAAA,CAACP,KAAK,CAACoF,UAAU;YAAAV,QAAA,EAAC;UAAQ;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC,eAC7CzE,OAAA,CAACP,KAAK,CAACoF,UAAU;YAAAV,QAAA,EAAC;UAAO;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC,eAC5CzE,OAAA,CAACP,KAAK,CAACoF,UAAU;YAAAV,QAAA,EAAC;UAAK;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC,eAC1CzE,OAAA,CAACP,KAAK,CAACoF,UAAU;YAAAV,QAAA,EAAC;UAAS;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC,eAC9CzE,OAAA,CAACP,KAAK,CAACoF,UAAU;YAAAV,QAAA,EAAC;UAAO;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC,eAC5CzE,OAAA,CAACP,KAAK,CAACoF,UAAU;YAAAV,QAAA,EAAC;UAAO;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAEfzE,OAAA,CAACP,KAAK,CAACqF,IAAI;QAAAX,QAAA,EACN7D,KAAK,CAACkD,GAAG,CAAEtB,IAAI,iBACZlC,OAAA,CAACP,KAAK,CAACmF,GAAG;UAAAT,QAAA,gBACNnE,OAAA,CAACP,KAAK,CAACsF,IAAI;YAAAZ,QAAA,EAAEjC,IAAI,CAAC8C,QAAQ,CAAChB;UAAI;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eAC7CzE,OAAA,CAACP,KAAK,CAACsF,IAAI;YAAAZ,QAAA,EAAEjC,IAAI,CAAC+C,OAAO,CAACjB;UAAI;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eAC5CzE,OAAA,CAACP,KAAK,CAACsF,IAAI;YAAAZ,QAAA,EAAEjC,IAAI,CAACgD,KAAK,CAAClB;UAAI;YAAAM,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eAC1CzE,OAAA,CAACP,KAAK,CAACsF,IAAI;YAAAZ,QAAA,EAAEjC,IAAI,CAACnB;UAAQ;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eACxCzE,OAAA,CAACP,KAAK,CAACsF,IAAI;YAAAZ,QAAA,eACPnE,OAAA,CAACN,MAAM;cAACyF,IAAI,EAAC,MAAM;cAACC,KAAK,EAAC,QAAQ;cAACf,OAAO,EAAEA,CAAA,KAAMrB,UAAU,CAACd,IAAI,CAACC,EAAE,CAAE;cAAAgC,QAAA,gBAClEnE,OAAA;gBAAGqF,SAAS,EAAC;cAAW;gBAAAf,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC7BzE,OAAA;gBAAMsF,KAAK,EAAE;kBAAEC,WAAW,EAAE;gBAAM,CAAE;gBAAApB,QAAA,EAAC;cAAI;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5C;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC,eACbzE,OAAA,CAACP,KAAK,CAACsF,IAAI;YAAAZ,QAAA,eACPnE,OAAA,CAACN,MAAM;cAACyF,IAAI,EAAC,QAAQ;cAACC,KAAK,EAAC,KAAK;cAACf,OAAO,EAAEA,CAAA,KAAM3C,YAAY,CAACQ,IAAI,CAACC,EAAE,CAAE;cAAAgC,QAAA,gBACnEnE,OAAA;gBAAGqF,SAAS,EAAC;cAAa;gBAAAf,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC/BzE,OAAA;gBAAMsF,KAAK,EAAE;kBAAEC,WAAW,EAAE;gBAAM,CAAE;gBAAApB,QAAA,EAAC;cAAM;gBAAAG,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9C;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC;QAAA,GAhBDvC,IAAI,CAACC,EAAE;UAAAmC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAiBZ,CACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,eAERzE,OAAA,CAACL,KAAK;MAAC6F,IAAI,EAAEhF,SAAU;MAACiF,OAAO,EAAE/B,gBAAiB;MAAAS,QAAA,gBAC9CnE,OAAA,CAACL,KAAK,CAACgF,MAAM;QAAAR,QAAA,EACR7C,UAAU,GAAG,WAAW,GAAG;MAAiB;QAAAgD,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC,CAAC,EACdnD,UAAU,gBACPtB,OAAA,CAACL,KAAK,CAAC+F,OAAO;QAAAvB,QAAA,eACVnE,OAAA,CAACJ,IAAI;UAAAuE,QAAA,gBACDnE,OAAA,CAACJ,IAAI,CAAC+F,KAAK;YAAAxB,QAAA,gBACPnE,OAAA;cAAAmE,QAAA,EAAO;YAAQ;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACvBzE,OAAA,CAACF,QAAQ;cACLkE,IAAI,EAAC,YAAY;cACjBC,KAAK,EAAEzC,YAAY,CAACZ,UAAW;cAC/BgF,OAAO,EAAE5E,SAAS,CAACwC,GAAG,CAAEwB,QAAQ,KAAM;gBAClCa,GAAG,EAAEb,QAAQ,CAAC7C,EAAE;gBAChB2D,IAAI,EAAEd,QAAQ,CAAChB,IAAI;gBACnBC,KAAK,EAAEe,QAAQ,CAAC7C;cACpB,CAAC,CAAC,CAAE;cACJ4D,QAAQ,EAAEA,CAAChC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,YAAY;gBAAEC;cAAM,CAAC,CACrD;cACD+B,SAAS;YAAA;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACbzE,OAAA,CAACJ,IAAI,CAAC+F,KAAK;YAAAxB,QAAA,gBACPnE,OAAA;cAAAmE,QAAA,EAAO;YAAO;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACtBzE,OAAA,CAACF,QAAQ;cACLkE,IAAI,EAAC,WAAW;cAChBC,KAAK,EAAEzC,YAAY,CAACX,SAAU;cAC9B+E,OAAO,EAAE1E,QAAQ,CAACsC,GAAG,CAAEyB,OAAO,KAAM;gBAChCY,GAAG,EAAEZ,OAAO,CAAC9C,EAAE;gBACf2D,IAAI,EAAEb,OAAO,CAACjB,IAAI;gBAClBC,KAAK,EAAEgB,OAAO,CAAC9C;cACnB,CAAC,CAAC,CAAE;cACJ4D,QAAQ,EAAEA,CAAChC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,WAAW;gBAAEC;cAAM,CAAC,CACpD;cACD+B,SAAS;YAAA;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACbzE,OAAA,CAACJ,IAAI,CAAC+F,KAAK;YAAAxB,QAAA,gBACPnE,OAAA;cAAAmE,QAAA,EAAO;YAAK;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACpBzE,OAAA,CAACF,QAAQ;cACLkE,IAAI,EAAC,SAAS;cACdC,KAAK,EAAEzC,YAAY,CAACV,OAAQ;cAC5B8E,OAAO,EAAExE,MAAM,CAACoC,GAAG,CAAE0B,KAAK,KAAM;gBAC5BW,GAAG,EAAEX,KAAK,CAAC/C,EAAE;gBACb2D,IAAI,EAAEZ,KAAK,CAAClB,IAAI;gBAChBC,KAAK,EAAEiB,KAAK,CAAC/C;cACjB,CAAC,CAAC,CAAE;cACJ4D,QAAQ,EAAEA,CAAChC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,SAAS;gBAAEC;cAAM,CAAC,CAClD;cACD+B,SAAS;YAAA;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACbzE,OAAA,CAACJ,IAAI,CAAC+F,KAAK;YAAAxB,QAAA,gBACPnE,OAAA;cAAAmE,QAAA,EAAO;YAAS;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACxBzE,OAAA,CAACH,KAAK;cACFmE,IAAI,EAAC,UAAU;cACfiC,IAAI,EAAC,MAAM;cACXhC,KAAK,EAAEzC,YAAY,CAACT,QAAS;cAC7BgF,QAAQ,EAAEjC;YAAkB;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,gBAEhBzE,OAAA,CAACL,KAAK,CAAC+F,OAAO;QAAAvB,QAAA,eACVnE,OAAA,CAACJ,IAAI;UAAAuE,QAAA,gBACDnE,OAAA,CAACJ,IAAI,CAAC+F,KAAK;YAAAxB,QAAA,gBACPnE,OAAA;cAAAmE,QAAA,EAAO;YAAQ;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACvBzE,OAAA,CAACF,QAAQ;cACLkE,IAAI,EAAC,YAAY;cACjBC,KAAK,EAAEvD,WAAW,CAACE,UAAW;cAC9BgF,OAAO,EAAE5E,SAAS,CAACwC,GAAG,CAAEwB,QAAQ,KAAM;gBAClCa,GAAG,EAAEb,QAAQ,CAAC7C,EAAE;gBAChB2D,IAAI,EAAEd,QAAQ,CAAChB,IAAI;gBACnBC,KAAK,EAAEe,QAAQ,CAAC7C;cACpB,CAAC,CAAC,CAAE;cACJ4D,QAAQ,EAAEA,CAAChC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,YAAY;gBAAEC;cAAM,CAAC,CACrD;cACD+B,SAAS;YAAA;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACbzE,OAAA,CAACJ,IAAI,CAAC+F,KAAK;YAAAxB,QAAA,gBACPnE,OAAA;cAAAmE,QAAA,EAAO;YAAO;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACtBzE,OAAA,CAACF,QAAQ;cACLkE,IAAI,EAAC,WAAW;cAChBC,KAAK,EAAEvD,WAAW,CAACG,SAAU;cAC7B+E,OAAO,EAAE1E,QAAQ,CAACsC,GAAG,CAAEyB,OAAO,KAAM;gBAChCY,GAAG,EAAEZ,OAAO,CAAC9C,EAAE;gBACf2D,IAAI,EAAEb,OAAO,CAACjB,IAAI;gBAClBC,KAAK,EAAEgB,OAAO,CAAC9C;cACnB,CAAC,CAAC,CAAE;cACJ4D,QAAQ,EAAEA,CAAChC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,WAAW;gBAAEC;cAAM,CAAC,CACpD;cACD+B,SAAS;YAAA;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACbzE,OAAA,CAACJ,IAAI,CAAC+F,KAAK;YAAAxB,QAAA,gBACPnE,OAAA;cAAAmE,QAAA,EAAO;YAAK;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACpBzE,OAAA,CAACF,QAAQ;cACLkE,IAAI,EAAC,SAAS;cACdC,KAAK,EAAEvD,WAAW,CAACI,OAAQ;cAC3B8E,OAAO,EAAExE,MAAM,CAACoC,GAAG,CAAE0B,KAAK,KAAM;gBAC5BW,GAAG,EAAEX,KAAK,CAAC/C,EAAE;gBACb2D,IAAI,EAAEZ,KAAK,CAAClB,IAAI;gBAChBC,KAAK,EAAEiB,KAAK,CAAC/C;cACjB,CAAC,CAAC,CAAE;cACJ4D,QAAQ,EAAEA,CAAChC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,SAAS;gBAAEC;cAAM,CAAC,CAClD;cACD+B,SAAS;YAAA;cAAA1B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACbzE,OAAA,CAACJ,IAAI,CAAC+F,KAAK;YAAAxB,QAAA,gBACPnE,OAAA;cAAAmE,QAAA,EAAO;YAAS;cAAAG,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACxBzE,OAAA,CAACH,KAAK;cACFmE,IAAI,EAAC,UAAU;cACfiC,IAAI,EAAC,MAAM;cACXhC,KAAK,EAAEvD,WAAW,CAACK,QAAS;cAC5BgF,QAAQ,EAAEjC;YAAkB;cAAAQ,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAClB,eACDzE,OAAA,CAACL,KAAK,CAACuG,OAAO;QAAA/B,QAAA,EACT7C,UAAU,gBACPtB,OAAA,CAAAE,SAAA;UAAAiE,QAAA,gBACInE,OAAA,CAACN,MAAM;YAAC0E,OAAO;YAACC,OAAO,EAAElB,cAAe;YAAAgB,QAAA,EAAC;UAEzC;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTzE,OAAA,CAACN,MAAM;YAACyG,QAAQ;YAAC9B,OAAO,EAAEX,gBAAiB;YAAAS,QAAA,EAAC;UAE5C;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,eACX,CAAC,gBAEHzE,OAAA,CAAAE,SAAA;UAAAiE,QAAA,gBACInE,OAAA,CAACN,MAAM;YAAC0E,OAAO;YAACC,OAAO,EAAEV,iBAAkB;YAAAQ,QAAA,EAAC;UAE5C;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACTzE,OAAA,CAACN,MAAM;YAAC2E,OAAO,EAAEX,gBAAiB;YAAAS,QAAA,EAAC;UAAM;YAAAG,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,eACpD;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd,CAAC;AAACpE,EAAA,CA1WID,SAAS;AAAAgG,EAAA,GAAThG,SAAS;AA4Wf,eAAeA,SAAS;AAAC,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}