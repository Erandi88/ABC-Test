{"ast":null,"code":"var _jsxFileName = \"E:\\\\Industry Connect\\\\Repo\\\\ReactFirstCode\\\\onboard-react-app\\\\src\\\\components\\\\saleslist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Table, Button, Modal, Form, Input, Dropdown, Header, Icon } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst targetUrl = 'https://localhost:7148/api/Sale';\nconst SalesList = () => {\n  _s();\n  const [sales, setSales] = useState([]);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n  const [createModalOpen, setCreateModalOpen] = useState(false);\n  const [newSaleData, setNewSaleData] = useState({\n    customerId: '',\n    productId: '',\n    storeId: '',\n    dateSold: ''\n  });\n  const [customers, setCustomers] = useState([]);\n  const [products, setProducts] = useState([]);\n  const [stores, setStores] = useState([]);\n  const [editSaleId, setEditSaleId] = useState(null);\n  const [editSaleData, setEditSaleData] = useState({\n    customerId: '',\n    productId: '',\n    storeId: '',\n    dateSold: ''\n  });\n  const [confirmDelete, setConfirmDelete] = useState(false);\n  const [saleToDelete, setSaleToDelete] = useState(null);\n  const handleDelete = saleId => {\n    setSaleToDelete(saleId);\n    setConfirmDelete(true);\n  };\n  const confirmDeleteSale = async () => {\n    try {\n      const response = await fetch(`${targetUrl}/${saleToDelete}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        // Sale deleted successfully\n        const updatedSales = sales.filter(sale => sale.id !== saleToDelete);\n        setSales(updatedSales);\n      } else {\n        console.error('Error deleting sale');\n      }\n    } catch (error) {\n      console.error('Error deleting sale:', error);\n    }\n    setSaleToDelete(null);\n    setConfirmDelete(false);\n  };\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const salesResponse = await fetch(targetUrl);\n        const salesData = await salesResponse.json();\n        setSales(salesData);\n\n        // Fetch data for dropdowns (customers, products, stores)\n\n        const customersResponse = await fetch(`https://localhost:7148/api/Customer?page=${currentPage}&pageSize=10`);\n        const customersData = await customersResponse.json();\n        setCustomers(customersData.customers);\n        setTotalPages(customersData.totalPages);\n        const productsResponse = await fetch(`https://localhost:7148/api/Product?page=${currentPage}&pageSize=10`);\n        const productsData = await productsResponse.json();\n        setProducts(productsData.products);\n        setTotalPages(productsData.totalPages);\n        const storesResponse = await fetch(`https://localhost:7148/api/Store?page=${currentPage}&pageSize=10`);\n        const storesData = await storesResponse.json();\n        setStores(storesData.stores);\n        setTotalPages(storesData.totalPages);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, [currentPage]);\n  const handleEdit = saleId => {\n    setEditSaleId(saleId);\n    const saleToEdit = sales.find(sale => sale.id === saleId);\n    if (saleToEdit) {\n      setEditSaleData({\n        customerId: saleToEdit.customerId,\n        productId: saleToEdit.productId,\n        storeId: saleToEdit.storeId,\n        dateSold: saleToEdit.dateSold\n      });\n    }\n    setEditModalOpen(true);\n  };\n  const handleEditSale = async () => {\n    if (editSaleId) {\n      try {\n        const response = await fetch(`${targetUrl}/${editSaleId}`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(editSaleData)\n        });\n        if (response.ok) {\n          const updatedSales = sales.map(sale => {\n            if (sale.id === editSaleId) {\n              return {\n                ...sale,\n                customerId: editSaleData.customerId,\n                productId: editSaleData.productId,\n                storeId: editSaleData.storeId,\n                dateSold: editSaleData.dateSold\n              };\n            }\n            return sale;\n          });\n          setSales(updatedSales);\n        } else {\n          console.error('Error updating sale');\n        }\n      } catch (error) {\n        console.error('Error updating sale:', error);\n      }\n    }\n    setEditSaleId(null);\n    setEditModalOpen(false);\n    setEditSaleData({\n      customerId: '',\n      productId: '',\n      storeId: '',\n      dateSold: ''\n    });\n  };\n  const handleNewSale = () => {\n    setCreateModalOpen(true);\n  };\n  const handleCloseCreateModal = () => {\n    setCreateModalOpen(false);\n    setNewSaleData({\n      customerId: '',\n      productId: '',\n      storeId: '',\n      dateSold: ''\n    });\n  };\n  const handleSaveNewSale = async () => {\n    try {\n      const response = await fetch(targetUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(newSaleData)\n      });\n      if (response.ok) {\n        const updatedResponse = await fetch(targetUrl);\n        const updatedData = await updatedResponse.json();\n        setSales(updatedData);\n        handleCloseCreateModal();\n      } else {\n        console.error('Error saving new sale');\n      }\n    } catch (error) {\n      console.error('Error saving new sale:', error);\n    }\n  };\n  const handleInputChange = (e, {\n    name,\n    value\n  }) => {\n    setNewSaleData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const handlePageChange = newPage => {\n    setCurrentPage(newPage);\n  };\n  const renderPagination = () => {\n    const pages = [];\n    for (let page = 1; page <= totalPages; page++) {\n      pages.push( /*#__PURE__*/_jsxDEV(Button, {\n        primary: currentPage === page,\n        onClick: () => handlePageChange(page),\n        children: page\n      }, page, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this));\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pagination\",\n      children: pages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 16\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: handleNewSale,\n      children: \"New Sale\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      celled: true,\n      children: [/*#__PURE__*/_jsxDEV(Table.Header, {\n        children: /*#__PURE__*/_jsxDEV(Table.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Customer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Product\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Store\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Date Sold\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Table.Body, {\n        children: sales.map(sale => /*#__PURE__*/_jsxDEV(Table.Row, {\n          children: [/*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: sale.customer.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: sale.product.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: sale.store.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: sale.dateSold\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: \"edit\",\n              color: \"yellow\",\n              onClick: () => handleEdit(sale.id),\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"edit icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 247,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  marginRight: '5px'\n                },\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 248,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              icon: \"delete\",\n              color: \"red\",\n              onClick: () => handleDelete(sale.id),\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"delete icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  marginRight: '5px'\n                },\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 29\n          }, this)]\n        }, sale.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }, this), renderPagination(), /*#__PURE__*/_jsxDEV(Modal, {\n      open: editModalOpen,\n      onClose: () => setEditModalOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: \"Edit Sale\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Customer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"customerId\",\n              value: editSaleData.customerId,\n              options: customers.map(customer => ({\n                key: customer.id,\n                text: customer.name,\n                value: customer.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'customerId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 284,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"productId\",\n              value: editSaleData.productId,\n              options: products.map(product => ({\n                key: product.id,\n                text: product.name,\n                value: product.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'productId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Store\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"storeId\",\n              value: editSaleData.storeId,\n              options: stores.map(store => ({\n                key: store.id,\n                text: store.name,\n                value: store.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'storeId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Date Sold\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              name: \"dateSold\",\n              type: \"date\",\n              value: editSaleData.dateSold,\n              onChange: handleInputChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 317,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          primary: true,\n          onClick: handleEditSale,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setEditModalOpen(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: createModalOpen,\n      onClose: handleCloseCreateModal,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: \"Create New Sale\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Customer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 340,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"customerId\",\n              value: newSaleData.customerId,\n              options: customers.map(customer => ({\n                key: customer.id,\n                text: customer.name,\n                value: customer.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'customerId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 341,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Product\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"productId\",\n              value: newSaleData.productId,\n              options: products.map(product => ({\n                key: product.id,\n                text: product.name,\n                value: product.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'productId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Store\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              name: \"storeId\",\n              value: newSaleData.storeId,\n              options: stores.map(store => ({\n                key: store.id,\n                text: store.name,\n                value: store.id\n              })),\n              onChange: (e, {\n                value\n              }) => handleInputChange(e, {\n                name: 'storeId',\n                value\n              }),\n              selection: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Date Sold\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 392,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              name: \"dateSold\",\n              type: \"date\",\n              value: newSaleData.dateSold,\n              onChange: (e, {\n                value\n              }) => setNewSaleData({\n                ...newSaleData,\n                dateSold: value\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 391,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          primary: true,\n          onClick: handleSaveNewSale,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleCloseCreateModal,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: confirmDelete,\n      onClose: () => setConfirmDelete(false),\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: \"Confirm Deletion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to delete this sale?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 414,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          color: \"red\",\n          inverted: true,\n          onClick: confirmDeleteSale,\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"remove\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 419,\n            columnNumber: 25\n          }, this), \" Delete\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"green\",\n          inverted: true,\n          onClick: () => setConfirmDelete(false),\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"checkmark\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 422,\n            columnNumber: 25\n          }, this), \" Cancel\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 9\n  }, this);\n};\n_s(SalesList, \"6J5osUEsnmn+cJOrjB4AiimZSeQ=\");\n_c = SalesList;\nexport default SalesList;\nvar _c;\n$RefreshReg$(_c, \"SalesList\");","map":{"version":3,"names":["React","useState","useEffect","Table","Button","Modal","Form","Input","Dropdown","Header","Icon","jsxDEV","_jsxDEV","targetUrl","SalesList","_s","sales","setSales","editModalOpen","setEditModalOpen","createModalOpen","setCreateModalOpen","newSaleData","setNewSaleData","customerId","productId","storeId","dateSold","customers","setCustomers","products","setProducts","stores","setStores","editSaleId","setEditSaleId","editSaleData","setEditSaleData","confirmDelete","setConfirmDelete","saleToDelete","setSaleToDelete","handleDelete","saleId","confirmDeleteSale","response","fetch","method","ok","updatedSales","filter","sale","id","console","error","currentPage","setCurrentPage","totalPages","setTotalPages","fetchData","salesResponse","salesData","json","customersResponse","customersData","productsResponse","productsData","storesResponse","storesData","handleEdit","saleToEdit","find","handleEditSale","headers","body","JSON","stringify","map","handleNewSale","handleCloseCreateModal","handleSaveNewSale","updatedResponse","updatedData","handleInputChange","e","name","value","prevData","handlePageChange","newPage","renderPagination","pages","page","push","primary","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","celled","Row","HeaderCell","Body","Cell","customer","product","store","icon","color","style","marginRight","open","onClose","Content","Field","options","key","text","onChange","selection","type","Actions","inverted","_c","$RefreshReg$"],"sources":["E:/Industry Connect/Repo/ReactFirstCode/onboard-react-app/src/components/saleslist.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Table, Button, Modal, Form, Input, Dropdown, Header, Icon } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst targetUrl = 'https://localhost:7148/api/Sale';\r\n\r\nconst SalesList = () => {\r\n    const [sales, setSales] = useState([]);\r\n    const [editModalOpen, setEditModalOpen] = useState(false);\r\n    const [createModalOpen, setCreateModalOpen] = useState(false);\r\n\r\n\r\n\r\n    const [newSaleData, setNewSaleData] = useState({\r\n        customerId: '',\r\n        productId: '',\r\n        storeId: '',\r\n        dateSold: '',\r\n    });\r\n\r\n    const [customers, setCustomers] = useState([]);\r\n    const [products, setProducts] = useState([]);\r\n    const [stores, setStores] = useState([]);\r\n\r\n    const [editSaleId, setEditSaleId] = useState(null);\r\n    const [editSaleData, setEditSaleData] = useState({\r\n        customerId: '',\r\n        productId: '',\r\n        storeId: '',\r\n        dateSold: '',\r\n    });\r\n\r\n    const [confirmDelete, setConfirmDelete] = useState(false);\r\n    const [saleToDelete, setSaleToDelete] = useState(null);\r\n\r\n    const handleDelete = (saleId) => {\r\n        setSaleToDelete(saleId);\r\n        setConfirmDelete(true);\r\n    };\r\n\r\n    const confirmDeleteSale = async () => {\r\n        try {\r\n            const response = await fetch(`${targetUrl}/${saleToDelete}`, {\r\n                method: 'DELETE',\r\n            });\r\n\r\n            if (response.ok) {\r\n                // Sale deleted successfully\r\n                const updatedSales = sales.filter((sale) => sale.id !== saleToDelete);\r\n                setSales(updatedSales);\r\n            } else {\r\n                console.error('Error deleting sale');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting sale:', error);\r\n        }\r\n\r\n        setSaleToDelete(null);\r\n        setConfirmDelete(false);\r\n    };\r\n\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [totalPages, setTotalPages] = useState(1);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const salesResponse = await fetch(targetUrl);\r\n                const salesData = await salesResponse.json();\r\n                setSales(salesData);\r\n\r\n                // Fetch data for dropdowns (customers, products, stores)\r\n\r\n                const customersResponse = await fetch(`https://localhost:7148/api/Customer?page=${currentPage}&pageSize=10`);\r\n                const customersData = await customersResponse.json();\r\n                setCustomers(customersData.customers);\r\n                setTotalPages(customersData.totalPages);\r\n\r\n                const productsResponse = await fetch(`https://localhost:7148/api/Product?page=${currentPage}&pageSize=10`);\r\n                const productsData = await productsResponse.json();\r\n                setProducts(productsData.products);\r\n                setTotalPages(productsData.totalPages);\r\n\r\n                const storesResponse = await fetch(`https://localhost:7148/api/Store?page=${currentPage}&pageSize=10`);\r\n                const storesData = await storesResponse.json();\r\n                setStores(storesData.stores);\r\n                setTotalPages(storesData.totalPages);\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, [currentPage]);\r\n\r\n    const handleEdit = (saleId) => {\r\n        setEditSaleId(saleId);\r\n        const saleToEdit = sales.find((sale) => sale.id === saleId);\r\n        if (saleToEdit) {\r\n            setEditSaleData({\r\n                customerId: saleToEdit.customerId,\r\n                productId: saleToEdit.productId,\r\n                storeId: saleToEdit.storeId,\r\n                dateSold: saleToEdit.dateSold,\r\n            });\r\n        }\r\n        setEditModalOpen(true);\r\n    };\r\n\r\n    const handleEditSale = async () => {\r\n\r\n        if (editSaleId) {\r\n            try {\r\n                const response = await fetch(`${targetUrl}/${editSaleId}`, {\r\n                    method: 'PUT',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                    },\r\n                    body: JSON.stringify(editSaleData),\r\n                });\r\n\r\n                if (response.ok) {\r\n                    const updatedSales = sales.map((sale) => {\r\n                        if (sale.id === editSaleId) {\r\n                            return {\r\n                                ...sale,\r\n                                customerId: editSaleData.customerId,\r\n                                productId: editSaleData.productId,\r\n                                storeId: editSaleData.storeId,\r\n                                dateSold: editSaleData.dateSold,\r\n                            };\r\n                        }\r\n                        return sale;\r\n                    });\r\n                    setSales(updatedSales);\r\n                } else {\r\n                    console.error('Error updating sale');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error updating sale:', error);\r\n            }\r\n        }\r\n\r\n        setEditSaleId(null);\r\n        setEditModalOpen(false);\r\n        setEditSaleData({\r\n            customerId: '',\r\n            productId: '',\r\n            storeId: '',\r\n            dateSold: '',\r\n        });\r\n    };\r\n\r\n    const handleNewSale = () => {\r\n        setCreateModalOpen(true);\r\n    };\r\n\r\n    const handleCloseCreateModal = () => {\r\n        setCreateModalOpen(false);\r\n        setNewSaleData({\r\n            customerId: '',\r\n            productId: '',\r\n            storeId: '',\r\n            dateSold: '',\r\n        });\r\n    };\r\n\r\n    const handleSaveNewSale = async () => {\r\n        try {\r\n            const response = await fetch(targetUrl, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify(newSaleData),\r\n            });\r\n\r\n            if (response.ok) {\r\n                const updatedResponse = await fetch(targetUrl);\r\n                const updatedData = await updatedResponse.json();\r\n                setSales(updatedData);\r\n\r\n                handleCloseCreateModal();\r\n            } else {\r\n                console.error('Error saving new sale');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error saving new sale:', error);\r\n        }\r\n    };\r\n\r\n    const handleInputChange = (e, { name, value }) => {\r\n        setNewSaleData((prevData) => ({\r\n            ...prevData,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    const handlePageChange = (newPage) => {\r\n        setCurrentPage(newPage);\r\n    };\r\n\r\n    const renderPagination = () => {\r\n        const pages = [];\r\n        for (let page = 1; page <= totalPages; page++) {\r\n            pages.push(\r\n                <Button\r\n                    key={page}\r\n                    primary={currentPage === page}\r\n                    onClick={() => handlePageChange(page)}\r\n                >\r\n                    {page}\r\n                </Button>\r\n            );\r\n        }\r\n\r\n        return <div className=\"pagination\">{pages}</div>;\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button primary onClick={handleNewSale}>\r\n                New Sale\r\n            </Button>\r\n\r\n            <Table celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell>Customer</Table.HeaderCell>\r\n                        <Table.HeaderCell>Product</Table.HeaderCell>\r\n                        <Table.HeaderCell>Store</Table.HeaderCell>\r\n                        <Table.HeaderCell>Date Sold</Table.HeaderCell>\r\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\r\n                        <Table.HeaderCell>Actions</Table.HeaderCell>\r\n                    </Table.Row>\r\n                </Table.Header>\r\n\r\n                <Table.Body>\r\n                    {sales.map((sale) => (\r\n                        <Table.Row key={sale.id}>\r\n                            <Table.Cell>{sale.customer.name}</Table.Cell>\r\n                            <Table.Cell>{sale.product.name}</Table.Cell>\r\n                            <Table.Cell>{sale.store.name}</Table.Cell>\r\n                            <Table.Cell>{sale.dateSold}</Table.Cell>\r\n                            <Table.Cell>\r\n                                <Button icon=\"edit\" color=\"yellow\" onClick={() => handleEdit(sale.id)}>\r\n                                    <i className=\"edit icon\"></i>\r\n                                    <span style={{ marginRight: '5px' }}>Edit</span>\r\n                                </Button>\r\n                            </Table.Cell>\r\n                            <Table.Cell>\r\n                                <Button icon=\"delete\" color=\"red\" onClick={() => handleDelete(sale.id)}>\r\n                                    <i className=\"delete icon\"></i>\r\n                                    <span style={{ marginRight: '5px' }}>Delete</span>\r\n                                </Button>\r\n                            </Table.Cell>\r\n                        </Table.Row>\r\n                    ))}\r\n                </Table.Body>\r\n            </Table>\r\n            {renderPagination()}\r\n\r\n            <Modal open={editModalOpen} onClose={() => setEditModalOpen(false)}>\r\n                <Modal.Header>Edit Sale</Modal.Header>\r\n                <Modal.Content>\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <label>Customer</label>\r\n                            <Dropdown\r\n                                name=\"customerId\"\r\n                                value={editSaleData.customerId}\r\n                                options={customers.map((customer) => ({\r\n                                    key: customer.id,\r\n                                    text: customer.name,\r\n                                    value: customer.id,\r\n                                }))}\r\n                                onChange={(e, { value }) =>\r\n                                    handleInputChange(e, { name: 'customerId', value })\r\n                                }\r\n                                selection\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Product</label>\r\n                            <Dropdown\r\n                                name=\"productId\"\r\n                                value={editSaleData.productId}\r\n                                options={products.map((product) => ({\r\n                                    key: product.id,\r\n                                    text: product.name,\r\n                                    value: product.id,\r\n                                }))}\r\n                                onChange={(e, { value }) =>\r\n                                    handleInputChange(e, { name: 'productId', value })\r\n                                }\r\n                                selection\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Store</label>\r\n                            <Dropdown\r\n                                name=\"storeId\"\r\n                                value={editSaleData.storeId}\r\n                                options={stores.map((store) => ({\r\n                                    key: store.id,\r\n                                    text: store.name,\r\n                                    value: store.id,\r\n                                }))}\r\n                                onChange={(e, { value }) =>\r\n                                    handleInputChange(e, { name: 'storeId', value })\r\n                                }\r\n                                selection\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Date Sold</label>\r\n                            <Input\r\n                                name=\"dateSold\"\r\n                                type=\"date\"\r\n                                value={editSaleData.dateSold}\r\n                                onChange={handleInputChange}\r\n                            />\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button primary onClick={handleEditSale}>\r\n                        Save\r\n                    </Button>\r\n                    <Button onClick={() => setEditModalOpen(false)}>Cancel</Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n            <Modal open={createModalOpen} onClose={handleCloseCreateModal}>\r\n                <Modal.Header>Create New Sale</Modal.Header>\r\n                <Modal.Content>\r\n\r\n                    <Form>\r\n                        <Form.Field>\r\n                            <label>Customer</label>\r\n                            <Dropdown\r\n\r\n                                name=\"customerId\"\r\n                                value={newSaleData.customerId}\r\n                                options={customers.map((customer) => ({\r\n\r\n                                    key: customer.id,\r\n                                    text: customer.name,\r\n                                    value: customer.id,\r\n                                }))}\r\n                                onChange={(e, { value }) =>\r\n                                    handleInputChange(e, { name: 'customerId', value })\r\n                                }\r\n                                selection\r\n                            />\r\n\r\n\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Product</label>\r\n                            <Dropdown\r\n                                name=\"productId\"\r\n                                value={newSaleData.productId}\r\n                                options={products.map((product) => ({\r\n                                    key: product.id,\r\n                                    text: product.name,\r\n                                    value: product.id,\r\n                                }))}\r\n                                onChange={(e, { value }) =>\r\n                                    handleInputChange(e, { name: 'productId', value })\r\n                                }\r\n                                selection\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Store</label>\r\n                            <Dropdown\r\n                                name=\"storeId\"\r\n                                value={newSaleData.storeId}\r\n                                options={stores.map((store) => ({\r\n                                    key: store.id,\r\n                                    text: store.name,\r\n                                    value: store.id,\r\n                                }))}\r\n                                onChange={(e, { value }) =>\r\n                                    handleInputChange(e, { name: 'storeId', value })\r\n                                }\r\n                                selection\r\n                            />\r\n                        </Form.Field>\r\n                        <Form.Field>\r\n                            <label>Date Sold</label>\r\n                            <Input\r\n                                name=\"dateSold\"\r\n                                type=\"date\"\r\n                                value={newSaleData.dateSold}\r\n                                onChange={(e, { value }) =>\r\n                                    setNewSaleData({ ...newSaleData, dateSold: value })\r\n                                }\r\n                            />\r\n                        </Form.Field>\r\n                    </Form>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button primary onClick={handleSaveNewSale}>\r\n                        Save\r\n                    </Button>\r\n                    <Button onClick={handleCloseCreateModal}>Cancel</Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n\r\n            <Modal open={confirmDelete} onClose={() => setConfirmDelete(false)}>\r\n                <Modal.Header>Confirm Deletion</Modal.Header>\r\n                <Modal.Content>\r\n                    <p>Are you sure you want to delete this sale?</p>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button color='red' inverted onClick={confirmDeleteSale}>\r\n                        <Icon name='remove' /> Delete\r\n                    </Button>\r\n                    <Button color='green' inverted onClick={() => setConfirmDelete(false)}>\r\n                        <Icon name='checkmark' /> Cancel\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SalesList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,KAAK,EAAEC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,QAAQ,mBAAmB;AAC7F,OAAO,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,SAAS,GAAG,iCAAiC;AAEnD,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACmB,eAAe,EAAEC,kBAAkB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;EAI7D,MAAM,CAACqB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC;IAC3CuB,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE;EACd,CAAC,CAAC;EAEF,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG5B,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC6B,QAAQ,EAAEC,WAAW,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC+B,MAAM,EAAEC,SAAS,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EAExC,MAAM,CAACiC,UAAU,EAAEC,aAAa,CAAC,GAAGlC,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAACmC,YAAY,EAAEC,eAAe,CAAC,GAAGpC,QAAQ,CAAC;IAC7CuB,UAAU,EAAE,EAAE;IACdC,SAAS,EAAE,EAAE;IACbC,OAAO,EAAE,EAAE;IACXC,QAAQ,EAAE;EACd,CAAC,CAAC;EAEF,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGtC,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACuC,YAAY,EAAEC,eAAe,CAAC,GAAGxC,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMyC,YAAY,GAAIC,MAAM,IAAK;IAC7BF,eAAe,CAACE,MAAM,CAAC;IACvBJ,gBAAgB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMK,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEjC,SAAU,IAAG2B,YAAa,EAAC,EAAE;QACzDO,MAAM,EAAE;MACZ,CAAC,CAAC;MAEF,IAAIF,QAAQ,CAACG,EAAE,EAAE;QACb;QACA,MAAMC,YAAY,GAAGjC,KAAK,CAACkC,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKZ,YAAY,CAAC;QACrEvB,QAAQ,CAACgC,YAAY,CAAC;MAC1B,CAAC,MAAM;QACHI,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;MACxC;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAChD;IAEAb,eAAe,CAAC,IAAI,CAAC;IACrBF,gBAAgB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAGvD,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACwD,UAAU,EAAEC,aAAa,CAAC,GAAGzD,QAAQ,CAAC,CAAC,CAAC;EAE/CC,SAAS,CAAC,MAAM;IACZ,MAAMyD,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,aAAa,GAAG,MAAMd,KAAK,CAACjC,SAAS,CAAC;QAC5C,MAAMgD,SAAS,GAAG,MAAMD,aAAa,CAACE,IAAI,CAAC,CAAC;QAC5C7C,QAAQ,CAAC4C,SAAS,CAAC;;QAEnB;;QAEA,MAAME,iBAAiB,GAAG,MAAMjB,KAAK,CAAE,4CAA2CS,WAAY,cAAa,CAAC;QAC5G,MAAMS,aAAa,GAAG,MAAMD,iBAAiB,CAACD,IAAI,CAAC,CAAC;QACpDjC,YAAY,CAACmC,aAAa,CAACpC,SAAS,CAAC;QACrC8B,aAAa,CAACM,aAAa,CAACP,UAAU,CAAC;QAEvC,MAAMQ,gBAAgB,GAAG,MAAMnB,KAAK,CAAE,2CAA0CS,WAAY,cAAa,CAAC;QAC1G,MAAMW,YAAY,GAAG,MAAMD,gBAAgB,CAACH,IAAI,CAAC,CAAC;QAClD/B,WAAW,CAACmC,YAAY,CAACpC,QAAQ,CAAC;QAClC4B,aAAa,CAACQ,YAAY,CAACT,UAAU,CAAC;QAEtC,MAAMU,cAAc,GAAG,MAAMrB,KAAK,CAAE,yCAAwCS,WAAY,cAAa,CAAC;QACtG,MAAMa,UAAU,GAAG,MAAMD,cAAc,CAACL,IAAI,CAAC,CAAC;QAC9C7B,SAAS,CAACmC,UAAU,CAACpC,MAAM,CAAC;QAC5B0B,aAAa,CAACU,UAAU,CAACX,UAAU,CAAC;MACxC,CAAC,CAAC,OAAOH,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC;IAEDK,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,CAACJ,WAAW,CAAC,CAAC;EAEjB,MAAMc,UAAU,GAAI1B,MAAM,IAAK;IAC3BR,aAAa,CAACQ,MAAM,CAAC;IACrB,MAAM2B,UAAU,GAAGtD,KAAK,CAACuD,IAAI,CAAEpB,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKT,MAAM,CAAC;IAC3D,IAAI2B,UAAU,EAAE;MACZjC,eAAe,CAAC;QACZb,UAAU,EAAE8C,UAAU,CAAC9C,UAAU;QACjCC,SAAS,EAAE6C,UAAU,CAAC7C,SAAS;QAC/BC,OAAO,EAAE4C,UAAU,CAAC5C,OAAO;QAC3BC,QAAQ,EAAE2C,UAAU,CAAC3C;MACzB,CAAC,CAAC;IACN;IACAR,gBAAgB,CAAC,IAAI,CAAC;EAC1B,CAAC;EAED,MAAMqD,cAAc,GAAG,MAAAA,CAAA,KAAY;IAE/B,IAAItC,UAAU,EAAE;MACZ,IAAI;QACA,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEjC,SAAU,IAAGqB,UAAW,EAAC,EAAE;UACvDa,MAAM,EAAE,KAAK;UACb0B,OAAO,EAAE;YACL,cAAc,EAAE;UACpB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACxC,YAAY;QACrC,CAAC,CAAC;QAEF,IAAIS,QAAQ,CAACG,EAAE,EAAE;UACb,MAAMC,YAAY,GAAGjC,KAAK,CAAC6D,GAAG,CAAE1B,IAAI,IAAK;YACrC,IAAIA,IAAI,CAACC,EAAE,KAAKlB,UAAU,EAAE;cACxB,OAAO;gBACH,GAAGiB,IAAI;gBACP3B,UAAU,EAAEY,YAAY,CAACZ,UAAU;gBACnCC,SAAS,EAAEW,YAAY,CAACX,SAAS;gBACjCC,OAAO,EAAEU,YAAY,CAACV,OAAO;gBAC7BC,QAAQ,EAAES,YAAY,CAACT;cAC3B,CAAC;YACL;YACA,OAAOwB,IAAI;UACf,CAAC,CAAC;UACFlC,QAAQ,CAACgC,YAAY,CAAC;QAC1B,CAAC,MAAM;UACHI,OAAO,CAACC,KAAK,CAAC,qBAAqB,CAAC;QACxC;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ;IAEAnB,aAAa,CAAC,IAAI,CAAC;IACnBhB,gBAAgB,CAAC,KAAK,CAAC;IACvBkB,eAAe,CAAC;MACZb,UAAU,EAAE,EAAE;MACdC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE;IACd,CAAC,CAAC;EACN,CAAC;EAED,MAAMmD,aAAa,GAAGA,CAAA,KAAM;IACxBzD,kBAAkB,CAAC,IAAI,CAAC;EAC5B,CAAC;EAED,MAAM0D,sBAAsB,GAAGA,CAAA,KAAM;IACjC1D,kBAAkB,CAAC,KAAK,CAAC;IACzBE,cAAc,CAAC;MACXC,UAAU,EAAE,EAAE;MACdC,SAAS,EAAE,EAAE;MACbC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE;IACd,CAAC,CAAC;EACN,CAAC;EAED,MAAMqD,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI;MACA,MAAMnC,QAAQ,GAAG,MAAMC,KAAK,CAACjC,SAAS,EAAE;QACpCkC,MAAM,EAAE,MAAM;QACd0B,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACtD,WAAW;MACpC,CAAC,CAAC;MAEF,IAAIuB,QAAQ,CAACG,EAAE,EAAE;QACb,MAAMiC,eAAe,GAAG,MAAMnC,KAAK,CAACjC,SAAS,CAAC;QAC9C,MAAMqE,WAAW,GAAG,MAAMD,eAAe,CAACnB,IAAI,CAAC,CAAC;QAChD7C,QAAQ,CAACiE,WAAW,CAAC;QAErBH,sBAAsB,CAAC,CAAC;MAC5B,CAAC,MAAM;QACH1B,OAAO,CAACC,KAAK,CAAC,uBAAuB,CAAC;MAC1C;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,MAAM6B,iBAAiB,GAAGA,CAACC,CAAC,EAAE;IAAEC,IAAI;IAAEC;EAAM,CAAC,KAAK;IAC9C/D,cAAc,CAAEgE,QAAQ,KAAM;MAC1B,GAAGA,QAAQ;MACX,CAACF,IAAI,GAAGC;IACZ,CAAC,CAAC,CAAC;EACP,CAAC;EAED,MAAME,gBAAgB,GAAIC,OAAO,IAAK;IAClCjC,cAAc,CAACiC,OAAO,CAAC;EAC3B,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC3B,MAAMC,KAAK,GAAG,EAAE;IAChB,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,IAAInC,UAAU,EAAEmC,IAAI,EAAE,EAAE;MAC3CD,KAAK,CAACE,IAAI,eACNjF,OAAA,CAACR,MAAM;QAEH0F,OAAO,EAAEvC,WAAW,KAAKqC,IAAK;QAC9BG,OAAO,EAAEA,CAAA,KAAMP,gBAAgB,CAACI,IAAI,CAAE;QAAAI,QAAA,EAErCJ;MAAI,GAJAA,IAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKL,CACZ,CAAC;IACL;IAEA,oBAAOxF,OAAA;MAAKyF,SAAS,EAAC,YAAY;MAAAL,QAAA,EAAEL;IAAK;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EACpD,CAAC;EAED,oBACIxF,OAAA;IAAAoF,QAAA,gBACIpF,OAAA,CAACR,MAAM;MAAC0F,OAAO;MAACC,OAAO,EAAEjB,aAAc;MAAAkB,QAAA,EAAC;IAExC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAETxF,OAAA,CAACT,KAAK;MAACmG,MAAM;MAAAN,QAAA,gBACTpF,OAAA,CAACT,KAAK,CAACM,MAAM;QAAAuF,QAAA,eACTpF,OAAA,CAACT,KAAK,CAACoG,GAAG;UAAAP,QAAA,gBACNpF,OAAA,CAACT,KAAK,CAACqG,UAAU;YAAAR,QAAA,EAAC;UAAQ;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC,eAC7CxF,OAAA,CAACT,KAAK,CAACqG,UAAU;YAAAR,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC,eAC5CxF,OAAA,CAACT,KAAK,CAACqG,UAAU;YAAAR,QAAA,EAAC;UAAK;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC,eAC1CxF,OAAA,CAACT,KAAK,CAACqG,UAAU;YAAAR,QAAA,EAAC;UAAS;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC,eAC9CxF,OAAA,CAACT,KAAK,CAACqG,UAAU;YAAAR,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC,eAC5CxF,OAAA,CAACT,KAAK,CAACqG,UAAU;YAAAR,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAkB,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF,CAAC,eAEfxF,OAAA,CAACT,KAAK,CAACsG,IAAI;QAAAT,QAAA,EACNhF,KAAK,CAAC6D,GAAG,CAAE1B,IAAI,iBACZvC,OAAA,CAACT,KAAK,CAACoG,GAAG;UAAAP,QAAA,gBACNpF,OAAA,CAACT,KAAK,CAACuG,IAAI;YAAAV,QAAA,EAAE7C,IAAI,CAACwD,QAAQ,CAACtB;UAAI;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eAC7CxF,OAAA,CAACT,KAAK,CAACuG,IAAI;YAAAV,QAAA,EAAE7C,IAAI,CAACyD,OAAO,CAACvB;UAAI;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eAC5CxF,OAAA,CAACT,KAAK,CAACuG,IAAI;YAAAV,QAAA,EAAE7C,IAAI,CAAC0D,KAAK,CAACxB;UAAI;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eAC1CxF,OAAA,CAACT,KAAK,CAACuG,IAAI;YAAAV,QAAA,EAAE7C,IAAI,CAACxB;UAAQ;YAAAsE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAa,CAAC,eACxCxF,OAAA,CAACT,KAAK,CAACuG,IAAI;YAAAV,QAAA,eACPpF,OAAA,CAACR,MAAM;cAAC0G,IAAI,EAAC,MAAM;cAACC,KAAK,EAAC,QAAQ;cAAChB,OAAO,EAAEA,CAAA,KAAM1B,UAAU,CAAClB,IAAI,CAACC,EAAE,CAAE;cAAA4C,QAAA,gBAClEpF,OAAA;gBAAGyF,SAAS,EAAC;cAAW;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC7BxF,OAAA;gBAAMoG,KAAK,EAAE;kBAAEC,WAAW,EAAE;gBAAM,CAAE;gBAAAjB,QAAA,EAAC;cAAI;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC5C;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC,eACbxF,OAAA,CAACT,KAAK,CAACuG,IAAI;YAAAV,QAAA,eACPpF,OAAA,CAACR,MAAM;cAAC0G,IAAI,EAAC,QAAQ;cAACC,KAAK,EAAC,KAAK;cAAChB,OAAO,EAAEA,CAAA,KAAMrD,YAAY,CAACS,IAAI,CAACC,EAAE,CAAE;cAAA4C,QAAA,gBACnEpF,OAAA;gBAAGyF,SAAS,EAAC;cAAa;gBAAAJ,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC,eAC/BxF,OAAA;gBAAMoG,KAAK,EAAE;kBAAEC,WAAW,EAAE;gBAAM,CAAE;gBAAAjB,QAAA,EAAC;cAAM;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC9C;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC;QAAA,GAhBDjD,IAAI,CAACC,EAAE;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAiBZ,CACd;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACV,CAAC,EACPV,gBAAgB,CAAC,CAAC,eAEnB9E,OAAA,CAACP,KAAK;MAAC6G,IAAI,EAAEhG,aAAc;MAACiG,OAAO,EAAEA,CAAA,KAAMhG,gBAAgB,CAAC,KAAK,CAAE;MAAA6E,QAAA,gBAC/DpF,OAAA,CAACP,KAAK,CAACI,MAAM;QAAAuF,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAc,CAAC,eACtCxF,OAAA,CAACP,KAAK,CAAC+G,OAAO;QAAApB,QAAA,eACVpF,OAAA,CAACN,IAAI;UAAA0F,QAAA,gBACDpF,OAAA,CAACN,IAAI,CAAC+G,KAAK;YAAArB,QAAA,gBACPpF,OAAA;cAAAoF,QAAA,EAAO;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACvBxF,OAAA,CAACJ,QAAQ;cACL6E,IAAI,EAAC,YAAY;cACjBC,KAAK,EAAElD,YAAY,CAACZ,UAAW;cAC/B8F,OAAO,EAAE1F,SAAS,CAACiD,GAAG,CAAE8B,QAAQ,KAAM;gBAClCY,GAAG,EAAEZ,QAAQ,CAACvD,EAAE;gBAChBoE,IAAI,EAAEb,QAAQ,CAACtB,IAAI;gBACnBC,KAAK,EAAEqB,QAAQ,CAACvD;cACpB,CAAC,CAAC,CAAE;cACJqE,QAAQ,EAAEA,CAACrC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,YAAY;gBAAEC;cAAM,CAAC,CACrD;cACDoC,SAAS;YAAA;cAAAzB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACbxF,OAAA,CAACN,IAAI,CAAC+G,KAAK;YAAArB,QAAA,gBACPpF,OAAA;cAAAoF,QAAA,EAAO;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACtBxF,OAAA,CAACJ,QAAQ;cACL6E,IAAI,EAAC,WAAW;cAChBC,KAAK,EAAElD,YAAY,CAACX,SAAU;cAC9B6F,OAAO,EAAExF,QAAQ,CAAC+C,GAAG,CAAE+B,OAAO,KAAM;gBAChCW,GAAG,EAAEX,OAAO,CAACxD,EAAE;gBACfoE,IAAI,EAAEZ,OAAO,CAACvB,IAAI;gBAClBC,KAAK,EAAEsB,OAAO,CAACxD;cACnB,CAAC,CAAC,CAAE;cACJqE,QAAQ,EAAEA,CAACrC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,WAAW;gBAAEC;cAAM,CAAC,CACpD;cACDoC,SAAS;YAAA;cAAAzB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACbxF,OAAA,CAACN,IAAI,CAAC+G,KAAK;YAAArB,QAAA,gBACPpF,OAAA;cAAAoF,QAAA,EAAO;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACpBxF,OAAA,CAACJ,QAAQ;cACL6E,IAAI,EAAC,SAAS;cACdC,KAAK,EAAElD,YAAY,CAACV,OAAQ;cAC5B4F,OAAO,EAAEtF,MAAM,CAAC6C,GAAG,CAAEgC,KAAK,KAAM;gBAC5BU,GAAG,EAAEV,KAAK,CAACzD,EAAE;gBACboE,IAAI,EAAEX,KAAK,CAACxB,IAAI;gBAChBC,KAAK,EAAEuB,KAAK,CAACzD;cACjB,CAAC,CAAC,CAAE;cACJqE,QAAQ,EAAEA,CAACrC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,SAAS;gBAAEC;cAAM,CAAC,CAClD;cACDoC,SAAS;YAAA;cAAAzB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACbxF,OAAA,CAACN,IAAI,CAAC+G,KAAK;YAAArB,QAAA,gBACPpF,OAAA;cAAAoF,QAAA,EAAO;YAAS;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACxBxF,OAAA,CAACL,KAAK;cACF8E,IAAI,EAAC,UAAU;cACfsC,IAAI,EAAC,MAAM;cACXrC,KAAK,EAAElD,YAAY,CAACT,QAAS;cAC7B8F,QAAQ,EAAEtC;YAAkB;cAAAc,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAC/B,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eAChBxF,OAAA,CAACP,KAAK,CAACuH,OAAO;QAAA5B,QAAA,gBACVpF,OAAA,CAACR,MAAM;UAAC0F,OAAO;UAACC,OAAO,EAAEvB,cAAe;UAAAwB,QAAA,EAAC;QAEzC;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTxF,OAAA,CAACR,MAAM;UAAC2F,OAAO,EAAEA,CAAA,KAAM5E,gBAAgB,CAAC,KAAK,CAAE;UAAA6E,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,eAERxF,OAAA,CAACP,KAAK;MAAC6G,IAAI,EAAE9F,eAAgB;MAAC+F,OAAO,EAAEpC,sBAAuB;MAAAiB,QAAA,gBAC1DpF,OAAA,CAACP,KAAK,CAACI,MAAM;QAAAuF,QAAA,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAc,CAAC,eAC5CxF,OAAA,CAACP,KAAK,CAAC+G,OAAO;QAAApB,QAAA,eAEVpF,OAAA,CAACN,IAAI;UAAA0F,QAAA,gBACDpF,OAAA,CAACN,IAAI,CAAC+G,KAAK;YAAArB,QAAA,gBACPpF,OAAA;cAAAoF,QAAA,EAAO;YAAQ;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACvBxF,OAAA,CAACJ,QAAQ;cAEL6E,IAAI,EAAC,YAAY;cACjBC,KAAK,EAAEhE,WAAW,CAACE,UAAW;cAC9B8F,OAAO,EAAE1F,SAAS,CAACiD,GAAG,CAAE8B,QAAQ,KAAM;gBAElCY,GAAG,EAAEZ,QAAQ,CAACvD,EAAE;gBAChBoE,IAAI,EAAEb,QAAQ,CAACtB,IAAI;gBACnBC,KAAK,EAAEqB,QAAQ,CAACvD;cACpB,CAAC,CAAC,CAAE;cACJqE,QAAQ,EAAEA,CAACrC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,YAAY;gBAAEC;cAAM,CAAC,CACrD;cACDoC,SAAS;YAAA;cAAAzB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAGM,CAAC,eACbxF,OAAA,CAACN,IAAI,CAAC+G,KAAK;YAAArB,QAAA,gBACPpF,OAAA;cAAAoF,QAAA,EAAO;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACtBxF,OAAA,CAACJ,QAAQ;cACL6E,IAAI,EAAC,WAAW;cAChBC,KAAK,EAAEhE,WAAW,CAACG,SAAU;cAC7B6F,OAAO,EAAExF,QAAQ,CAAC+C,GAAG,CAAE+B,OAAO,KAAM;gBAChCW,GAAG,EAAEX,OAAO,CAACxD,EAAE;gBACfoE,IAAI,EAAEZ,OAAO,CAACvB,IAAI;gBAClBC,KAAK,EAAEsB,OAAO,CAACxD;cACnB,CAAC,CAAC,CAAE;cACJqE,QAAQ,EAAEA,CAACrC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,WAAW;gBAAEC;cAAM,CAAC,CACpD;cACDoC,SAAS;YAAA;cAAAzB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACbxF,OAAA,CAACN,IAAI,CAAC+G,KAAK;YAAArB,QAAA,gBACPpF,OAAA;cAAAoF,QAAA,EAAO;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACpBxF,OAAA,CAACJ,QAAQ;cACL6E,IAAI,EAAC,SAAS;cACdC,KAAK,EAAEhE,WAAW,CAACI,OAAQ;cAC3B4F,OAAO,EAAEtF,MAAM,CAAC6C,GAAG,CAAEgC,KAAK,KAAM;gBAC5BU,GAAG,EAAEV,KAAK,CAACzD,EAAE;gBACboE,IAAI,EAAEX,KAAK,CAACxB,IAAI;gBAChBC,KAAK,EAAEuB,KAAK,CAACzD;cACjB,CAAC,CAAC,CAAE;cACJqE,QAAQ,EAAEA,CAACrC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnBH,iBAAiB,CAACC,CAAC,EAAE;gBAAEC,IAAI,EAAE,SAAS;gBAAEC;cAAM,CAAC,CAClD;cACDoC,SAAS;YAAA;cAAAzB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACZ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC,eACbxF,OAAA,CAACN,IAAI,CAAC+G,KAAK;YAAArB,QAAA,gBACPpF,OAAA;cAAAoF,QAAA,EAAO;YAAS;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAO,CAAC,eACxBxF,OAAA,CAACL,KAAK;cACF8E,IAAI,EAAC,UAAU;cACfsC,IAAI,EAAC,MAAM;cACXrC,KAAK,EAAEhE,WAAW,CAACK,QAAS;cAC5B8F,QAAQ,EAAEA,CAACrC,CAAC,EAAE;gBAAEE;cAAM,CAAC,KACnB/D,cAAc,CAAC;gBAAE,GAAGD,WAAW;gBAAEK,QAAQ,EAAE2D;cAAM,CAAC;YACrD;cAAAW,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACJ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACM,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACX;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACI,CAAC,eAChBxF,OAAA,CAACP,KAAK,CAACuH,OAAO;QAAA5B,QAAA,gBACVpF,OAAA,CAACR,MAAM;UAAC0F,OAAO;UAACC,OAAO,EAAEf,iBAAkB;UAAAgB,QAAA,EAAC;QAE5C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTxF,OAAA,CAACR,MAAM;UAAC2F,OAAO,EAAEhB,sBAAuB;UAAAiB,QAAA,EAAC;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,eAERxF,OAAA,CAACP,KAAK;MAAC6G,IAAI,EAAE5E,aAAc;MAAC6E,OAAO,EAAEA,CAAA,KAAM5E,gBAAgB,CAAC,KAAK,CAAE;MAAAyD,QAAA,gBAC/DpF,OAAA,CAACP,KAAK,CAACI,MAAM;QAAAuF,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAc,CAAC,eAC7CxF,OAAA,CAACP,KAAK,CAAC+G,OAAO;QAAApB,QAAA,eACVpF,OAAA;UAAAoF,QAAA,EAAG;QAA0C;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtC,CAAC,eAChBxF,OAAA,CAACP,KAAK,CAACuH,OAAO;QAAA5B,QAAA,gBACVpF,OAAA,CAACR,MAAM;UAAC2G,KAAK,EAAC,KAAK;UAACc,QAAQ;UAAC9B,OAAO,EAAEnD,iBAAkB;UAAAoD,QAAA,gBACpDpF,OAAA,CAACF,IAAI;YAAC2E,IAAI,EAAC;UAAQ;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,WAC1B;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACTxF,OAAA,CAACR,MAAM;UAAC2G,KAAK,EAAC,OAAO;UAACc,QAAQ;UAAC9B,OAAO,EAAEA,CAAA,KAAMxD,gBAAgB,CAAC,KAAK,CAAE;UAAAyD,QAAA,gBAClEpF,OAAA,CAACF,IAAI;YAAC2E,IAAI,EAAC;UAAW;YAAAY,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,WAC7B;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEd,CAAC;AAACrF,EAAA,CAraID,SAAS;AAAAgH,EAAA,GAAThH,SAAS;AAuaf,eAAeA,SAAS;AAAC,IAAAgH,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}