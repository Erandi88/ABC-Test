{"ast":null,"code":"var _jsxFileName = \"E:\\\\Industry Connect\\\\Repo\\\\ReactFirstCode\\\\onboard-react-app\\\\src\\\\components\\\\customerlist.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Table, Button, Modal, Form, Input } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst targetUrl = 'https://localhost:7148/api/Customer';\nconst Customerlist = () => {\n  _s();\n  const [customers, setCustomers] = useState([]);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [newCustomerData, setNewCustomerData] = useState({\n    name: '',\n    address: ''\n  });\n  const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false); // State for delete confirmation\n\n  const [customerToDelete, setCustomerToDelete] = useState(null); // Store the customer to delete\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('https://localhost:7148/api/Customer');\n        const data = await response.json();\n        setCustomers(data);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const handleEdit = customerId => {\n    // Implement your edit logic here\n    console.log(`Edit customer with ID ${customerId}`);\n  };\n  const handleDelete = customerId => {\n    // Display the confirmation modal and set the customer to delete\n    setDeleteConfirmationOpen(true);\n    setCustomerToDelete(customerId);\n  };\n  const confirmDelete = async () => {\n    try {\n      // Send a DELETE request to your API to delete the customer\n      const response = await fetch(`${targetUrl}/${customerToDelete}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        // Fetch the updated customer list\n        const updatedResponse = await fetch(targetUrl);\n        const updatedData = await updatedResponse.json();\n        setCustomers(updatedData);\n\n        // Close the confirmation modal\n        setDeleteConfirmationOpen(false);\n      } else {\n        console.error('Error deleting customer');\n      }\n    } catch (error) {\n      console.error('Error deleting customer:', error);\n    }\n  };\n  const handleNewCustomer = () => {\n    setModalOpen(true);\n  };\n  const handleCloseModal = () => {\n    setModalOpen(false);\n    setNewCustomerData({\n      name: '',\n      address: ''\n    });\n  };\n  const handleSaveNewCustomer = async () => {\n    // Your existing save new customer logic\n  };\n  const handleInputChange = (e, {\n    name,\n    value\n  }) => {\n    setNewCustomerData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: handleNewCustomer,\n      children: \"New Customer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      celled: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: modalOpen,\n      onClose: handleCloseModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      open: deleteConfirmationOpen,\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        children: \"Confirm Deletion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to delete this customer?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          negative: true,\n          onClick: () => setDeleteConfirmationOpen(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          positive: true,\n          onClick: confirmDelete,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n};\n_s(Customerlist, \"pnakGs/VoLvhPCo8ADQSTypjZbY=\");\n_c = Customerlist;\nexport default Customerlist;\nvar _c;\n$RefreshReg$(_c, \"Customerlist\");","map":{"version":3,"names":["React","useState","useEffect","Table","Button","Modal","Form","Input","jsxDEV","_jsxDEV","targetUrl","Customerlist","_s","customers","setCustomers","modalOpen","setModalOpen","newCustomerData","setNewCustomerData","name","address","deleteConfirmationOpen","setDeleteConfirmationOpen","customerToDelete","setCustomerToDelete","fetchData","response","fetch","data","json","error","console","handleEdit","customerId","log","handleDelete","confirmDelete","method","ok","updatedResponse","updatedData","handleNewCustomer","handleCloseModal","handleSaveNewCustomer","handleInputChange","e","value","prevData","children","primary","onClick","fileName","_jsxFileName","lineNumber","columnNumber","celled","open","onClose","Header","Content","Actions","negative","positive","_c","$RefreshReg$"],"sources":["E:/Industry Connect/Repo/ReactFirstCode/onboard-react-app/src/components/customerlist.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Table, Button, Modal, Form, Input } from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst targetUrl = 'https://localhost:7148/api/Customer';\r\n\r\nconst Customerlist = () => {\r\n    const [customers, setCustomers] = useState([]);\r\n    const [modalOpen, setModalOpen] = useState(false);\r\n    const [newCustomerData, setNewCustomerData] = useState({ name: '', address: '' });\r\n    const [deleteConfirmationOpen, setDeleteConfirmationOpen] = useState(false); // State for delete confirmation\r\n\r\n    const [customerToDelete, setCustomerToDelete] = useState(null); // Store the customer to delete\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch('https://localhost:7148/api/Customer');\r\n                const data = await response.json();\r\n                setCustomers(data);\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const handleEdit = (customerId) => {\r\n        // Implement your edit logic here\r\n        console.log(`Edit customer with ID ${customerId}`);\r\n    };\r\n\r\n    const handleDelete = (customerId) => {\r\n        // Display the confirmation modal and set the customer to delete\r\n        setDeleteConfirmationOpen(true);\r\n        setCustomerToDelete(customerId);\r\n    };\r\n\r\n    const confirmDelete = async () => {\r\n        try {\r\n            // Send a DELETE request to your API to delete the customer\r\n            const response = await fetch(`${targetUrl}/${customerToDelete}`, {\r\n                method: 'DELETE',\r\n            });\r\n\r\n            if (response.ok) {\r\n                // Fetch the updated customer list\r\n                const updatedResponse = await fetch(targetUrl);\r\n                const updatedData = await updatedResponse.json();\r\n                setCustomers(updatedData);\r\n\r\n                // Close the confirmation modal\r\n                setDeleteConfirmationOpen(false);\r\n            } else {\r\n                console.error('Error deleting customer');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error deleting customer:', error);\r\n        }\r\n    };\r\n\r\n    const handleNewCustomer = () => {\r\n        setModalOpen(true);\r\n    };\r\n\r\n    const handleCloseModal = () => {\r\n        setModalOpen(false);\r\n        setNewCustomerData({ name: '', address: '' });\r\n    };\r\n\r\n    const handleSaveNewCustomer = async () => {\r\n        // Your existing save new customer logic\r\n    };\r\n\r\n    const handleInputChange = (e, { name, value }) => {\r\n        setNewCustomerData((prevData) => ({\r\n            ...prevData,\r\n            [name]: value,\r\n        }));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button primary onClick={handleNewCustomer}>\r\n                New Customer\r\n            </Button>\r\n\r\n            <Table celled>\r\n                {/* ... Your table rendering code ... */}\r\n            </Table>\r\n\r\n            <Modal open={modalOpen} onClose={handleCloseModal}>\r\n                {/* ... Your new customer modal code ... */}\r\n            </Modal>\r\n\r\n            {/* Delete confirmation modal */}\r\n            <Modal open={deleteConfirmationOpen}>\r\n                <Modal.Header>Confirm Deletion</Modal.Header>\r\n                <Modal.Content>\r\n                    <p>Are you sure you want to delete this customer?</p>\r\n                </Modal.Content>\r\n                <Modal.Actions>\r\n                    <Button negative onClick={() => setDeleteConfirmationOpen(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button positive onClick={confirmDelete}>\r\n                        Confirm\r\n                    </Button>\r\n                </Modal.Actions>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Customerlist;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}